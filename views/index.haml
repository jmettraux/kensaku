
#top
#content

  #search
    %input#query{ :type => :text }
    %span.clear
      ⊗

  #cols

  #results

#bottom

:javascript

  Caboche.last(function() {

    var $query = $('#query');
    var $clear = $('#search > span.clear');
    var $cols = $('#cols');
    var $results = $('#results');

    $query.attr('autocapitalize', 'off');
    $query.attr('autocomplete', 'off');
    $query.attr('autocorrect', 'off');
    $query.attr('spellcheck', 'false');

    var previousEvent = undefined;

    var clear =
      function(ev) {
        $query.val('');
        displayResults('', []);
        $query.focus();
      };

    var displayResults = function(query, results) {

      if (results === []) return;

      $cols.empty();
      $results.empty();

      var cols = 0;
      Nu.each(results, function(entry) {
        if (cols === 7) return;
        if (entry.ki.length < 1) return;
        cols = cols + 1;
        var $col = Fb.c($cols, '.col', entry.ki[0]).$;
        $col.on('click', function(ev) {
          window.location.href = '#' + entry.id;
        });
      });

      Nu.each(results, function(entry) {

        var e = Fb.c($results, '#' + entry.id + '.entry');
        var $e = e.$;

        $e.attr('data-ks-query', query);

        var ki = e.div('.ki');
        var ka = e.div('.ka');
        Nu.each(entry.ki, function(kanji) { ki.div('.kanji', kanji); });
        Nu.each(entry.ka, function(kana) { ka.div('.kana', kana); });

        var gs = e.div('.gs')
        Nu.each(entry.gs, function(gloss) { gs.div('.gloss', gloss); });

        gs.div('.gloss', entry.id);

        $e.on('click', function(ev) {

          var pev = previousEvent || { timeStamp: 0, screenX: 0, screenY: 0 };

          var deltaX = ev.screenX - pev.screenX;
          var deltaY = ev.screenY - pev.screenY;
          var pta = $(pev.target).closest('.entry')[0];
          var ta = $(ev.target).closest('.entry')[0];

          //e.div('.log', JSON.stringify([ 'x', deltaX ]));
          //e.div('.log', JSON.stringify([ 'y', deltaY ]));

          if (
            ev.timeStamp - pev.timeStamp > 2800 ||
            Math.abs(deltaX) >= window.screen.width ||
            Math.abs(deltaY) >= window.screen.height
          ) {
            //e.div('.log', 'stashed0');
            previousEvent = ev;
            return;
          }

          if (deltaY > 100) {
            window.location.href = '#bottom';
          }
          else if (deltaY < -150) {
            window.location.href = '#top';
          }
          else if (pta === ta && deltaX < -70) {
            clear();
          }
          else if (#{params[:u] != nil} && pta === ta && deltaX > 70) {
            $.ajax({
              url: '/note/#{params[:u]}/' + entry.id,
              method: 'POST',
              data: '',
              success: function() { e.div('.added', '⚆'); },
              error: function() { e.div('.added.error', '⚆'); }
            });
          }
          else {
            //e.div('.log', 'stashed1');
            previousEvent = ev;
          }
        });
      });
    };

    $query.on('keyup', function(ev) {

      $clear.removeClass('error');

      var q = $.trim($query.val()).toLowerCase();

      if (q === '') {
        displayResults('', []);
        return;
      }

      $.ajax({
        url: '/query/' + q,
        success: function(data) {
          displayResults(q, data);
        },
        error: function(jqxhr, tstatus, err) {
          //console.log([ 'query err', tstatus, err ]);
          $clear.addClass('error');
        }
      });
    });

    $('.clear').on('click', clear);

    window.setTimeout(function() {
      //window.scrollTo(0, 1);
      $query.focus();
    }, 0);
  });

