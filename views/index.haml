
#top
#content

  #search
    %input#query{ :type => :text, :autocapitalize => 'off', :autocomplete => 'off', 'autocorrect' => 'off', :spellcheck => 'false' }
    %span.clear
      ⊗
    %span.kanji-lookup.k
      ⓚ
  #output
    #rads{ :style => 'display: none;' }
    #cols.row
    #results

#bottom

:javascript

  var u = #{param_u};

  Caboche.phase(0, 'marks/' + u);
  Caboche.phase(1, 'radicals');

  Caboche.last(function() {

    var $query = $('#query');
    var $klookup = $('#search > span.kanji-lookup');
    var $clear = $('#search > span.clear');
    var $rads = $('#rads');
    var $cols = $('#cols');
    var $results = $('#results');

    var previousEvent = undefined;

    var log = function(err) {

      var derr = Fb.c($results, '#err.entry.error');
      derr.div('message: ' + err.message);
      derr.div('line: ' + err.line);
      derr.div('stack:<br/>' + err.stack);
      window.location.href = '#err';
    };

    var clear = function(ev) {

      $query.val('');
      displayResults('', []);
      $query.focus();
    };

    var clickLocations = function(ev, entry) {

      var $target = $(ev.target).closest('.locations');
      $target.off();

      var $entry = $target.closest('.entry');
      $target.text('∋');

      $.ajax({
        url: '/locations/' + entry.id,
        success: function(data) {
          $target.html('');
          Nu.each([ 'starts', 'ends', 'contains' ], function(t, i) {
            Fb.c(
              $target, '.location', t + ' (' + data[i].length + ')'
            ).$.on('click', function(ev) {
              var toggled = ($('.loc.' + t)[0]);
              $('.loc').remove();
              if (toggled) return;
              Nu.each(data[i], function(en) {
                displayEntry(en, $entry, '.loc.' + t);
              });
            });
          });
        }
      });
    };

    var displayKanjiMeta = function(elt, entry) {

      var meta = Ks.spliceMeta(entry.gs);

      if (meta.grade) {
        $(elt).closest('.entry').find('.kanji-entry').addClass('jouyou');
      }

      Nu.each(meta, function(k, v) {
        elt.span('.kgloss', k + ': ');
        elt.span('.vgloss', v);
      });
    }

    var displayEntry = function(entry, i, klass) {

      var e;

      if ((typeof i) === 'object') e = Fb.a(i, '#' + entry.id + '.entry');
      else e = Fb.c($results, '#' + entry.id + '.entry');

      var $e = e.$;

      if (klass) Nu.each(klass.split('.'), function(k) { $e.addClass(k) });

      var isKanji = entry.id && entry.id.match(/^U/);

      $e.attr('data-ks-query', query);

      var ki = e.div('.ki');
      var ka = e.div('.ka');

      var jiClick =
        function(ev) {
          var $target = $(ev.target);
          var code = Ks.charToCode($target.text());
          var id = '#' + code;
          if ($(id).length > 0) {
            window.location.href = id;
            return;
          }
          $.ajax({
            url: '/ji/' + code,
            success: function(data) {
              displayEntry(data, $target.closest('.entry'));
            }
          });
        };

      Nu.each(entry.ki, function(kanji) {
        var kan = ki.div('.kanji');
        for (var i in kanji) {
          var $c = kan.span(kanji.charAt(i)).$;
          $c.on('click', jiClick);
        }
      });

      Nu.each(entry.ka, function(kana) { ka.div('.kana', kana); });

      if (isKanji) ki.$.addClass('kanji-entry');

      var gs = e.div('.gs')
      if (isKanji) displayKanjiMeta(gs, entry);
      Nu.each(entry.gs, function(gloss) { gs.div('.gloss', gloss); });

      gs.div('.gloss.entry-id', entry.id);

      if (entry.lo) {
        var $lo = gs.div('.locations').$;
        Fb.c($lo, 'span.element', '∈');
        $lo.on('click', function(ev) { clickLocations(ev, entry); });
      }

      if (marks.indexOf(entry.id) > -1) e.div('.added', '⚆');


      $e.on('click', function(ev) {

        var $target = $(ev.target);
        if ($target.hasClass('location') || $target.hasClass('locations')) {
          return;
        }

        var pev = previousEvent || { timeStamp: 0, screenX: 0, screenY: 0 };

        var deltaX = ev.screenX - pev.screenX;
        var deltaY = ev.screenY - pev.screenY;
        var pta = $(pev.target).closest('.entry')[0];
        var ta = $target.closest('.entry')[0];

        //e.div('.log', JSON.stringify([ 'x', deltaX ]));
        //e.div('.log', JSON.stringify([ 'y', deltaY ]));

        if (
          ev.timeStamp - pev.timeStamp > 2800 ||
          Math.abs(deltaX) >= window.screen.width ||
          Math.abs(deltaY) >= window.screen.height
        ) {
          //e.div('.log', 'stashed0');
          previousEvent = ev;
          return;
        }

        if (deltaY > 100) {
          window.location.href = '#bottom';
        }
        else if (deltaY < -150) {
          window.location.href = '#top';
        }
        else if (pta === ta && deltaX < -70) {
          clear();
        }
        else if (u && pta === ta && deltaX > 70) {
          $e.find('.added').remove();
          $.ajax({
            url: '/mark/' + u + '/' + entry.id,
            method: 'POST',
            data: '',
            success: function() {
              marks.push(entry.id);
              e.div('.added', '⚆');
            },
            error: function() {
              e.div('.added.error', '⚆');
            }
          });
        }
        else {
          //e.div('.log', 'stashed1');
          previousEvent = ev;
        }
      });
    };

    var clickRadical = function(ev) {

      $(ev.target).toggleClass('selected');

      var selected = Nu.collect($('.rad.selected'), function(e) {
        return $(e).text()[0];
      });

      var codes = null;
      Nu.each(selected, function(s) {
        var jis = radicals[s].slice(1);
        codes = Ks.intersection(codes || jis, jis);
      });
      codes = codes || [];

      codes = codes.slice(0, 154);
        // at 175, it coughs, bad request...

      $cols.empty();
      $results.empty();

      if (codes.length < 1) return;

      $.ajax({
        url: '/jis/' + codes.join(','),
        success: function(data) {
          Nu.each(data, displayEntry);
        }
      });
    }

    var toggleRadicals = function() {

      if ($rads.children().length < 1) displayRadicals();

      $rads.toggle();
    };

    var displayRadicals = function() {

      try {

        radicals[''] = [ 17 ];
        radicals[' '] = [ 17 ];
        radicals['  '] = [ 17 ];
          // shadow slots

        var col = 0;
        var $row;
        var strokes = 0;
        Nu.each(radicals, function(k, v) {
          if (col === 4) col = 0;
          if (col === 0) $row = Fb.c($rads, '.row', '').$;
          var sk = k;
          var ck = Ks.charToCode(k, 'rU');
          var co = Fb.c($row, '.col.rad', { id: ck }, sk);
          if (v[0] > strokes) {
            strokes = v[0];
            Fb.c(co, '.stroke-count', '' + (v[0] % 10));
          }
          if (v[1]) $(co).on('click', clickRadical);
          col = col + 1;
        });

      }
      catch(err) { log(err); }
    };

    var displayResults = function(query, results) {

      if (results === []) return;

      $cols.empty();
      $results.empty();

      try {

        var cols = 0;
        Nu.each(results, function(entry) {
          if (cols === 7) return;
          if (entry.ki.length < 1) return;
          cols = cols + 1;
          var col = Fb.c($cols, '.col', entry.ki[0]);
          if (entry.id && entry.id.match(/^U/)) col.span('.k', 'ⓚ');
          $(col).on('click', function(ev) {
            window.location.href = '#' + entry.id;
          });
        });

        Nu.each(results, displayEntry);

      }
      catch(err) { log(err); }
    };

    $query.on('keyup', function(ev) {

      //$rads.empty();
      $clear.removeClass('error');

      var q = $.trim($query.val()).toLowerCase();

      if (q === '') {
        displayResults('', []);
        return;
      }

      $.ajax({
        url: '/query/' + q,
        success: function(data) {
          displayResults(q, data);
        },
        error: function(jqxhr, tstatus, err) {
          //console.log([ 'query err', tstatus, err ]);
          $clear.addClass('error');
        }
      });
    });

    $klookup.on('click', toggleRadicals);
    $clear.on('click', clear);

    window.setTimeout(function() {
      //window.scrollTo(0, 1);
      $query.focus();
    }, 0);
  });

